{
  "name": "grunt-spec-check",
  "description": "Find and list JavaScript files that do not have corresponding specs",
  "version": "0.1.0",
  "homepage": "https://github.com/thatguynamedandy/grunt-spec-check",
  "author": {
    "name": "Andrew Polhill",
    "email": "apolhill@gmail.com",
    "url": "http://thatguynamedandy.com"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/thatguynamedandy/grunt-spec-check.git"
  },
  "bugs": {
    "url": "https://github.com/thatguynamedandy/grunt-spec-check/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/thatguynamedandy/grunt-spec-check/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-jshint": "^0.9.2",
    "grunt-contrib-nodeunit": "^0.3.3",
    "grunt": "~0.4.5"
  },
  "peerDependencies": {
    "grunt": "~0.4.5"
  },
  "keywords": [
    "gruntplugin"
  ],
  "readme": "# grunt-spec-check\n\n[![Build Status](https://travis-ci.org/thatguynamedandy/grunt-spec-check.svg)](https://travis-ci.org/thatguynamedandy/grunt-spec-check)\n\n> Find and list JavaScript files that do not have corresponding specs / tests\n\nThis is a simple task to help find untested files. Code coverage tools like [Istanbul](https://gotwarlost.github.io/istanbul/)\nare excellent for generating code coverage reports, however they generally do not\nalert you to files which are untested. This task will simply iterate through each\nfile and check that there is a corresponding test case. The task can be configured\nto fail the build or just provide warnings, depending on how strict you want to be.\n\nThe task will not in anyway run the JavaScript files or check that the test case even\ndoes anything. It is a simple task to complement coverage tools by letting you know\nwhich files are untested.\n\n## Getting Started\nThis plugin requires Grunt `~0.4.5`\n\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\n\n```shell\nnpm install grunt-spec-check --save-dev\n```\n\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\n\n```js\ngrunt.loadNpmTasks('grunt-spec-check');\n```\n\n## The \"specCheck\" task\n\n### Overview\nIn your project's Gruntfile, add a section named `specCheck` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  specCheck: {\n    options: {\n      // Task-specific options go here.\n    },\n    your_target: {\n      // Target-specific file lists and/or options go here.\n    },\n  },\n});\n```\n\n### Options\n\n#### options.baseDir\nType: `String`\nDefault value: `/lib`\n\nA string value that corresponds to the location of the scripts that should be tested. When\nsearching for a spec this section of the filepath is replaced with the value\nspecified for testDir\n\n#### options.testDir\nType: `String`\nDefault value: `/test`\n\nA string value that corresponds to the location of your test files. It is assumed\nthat the directory structure of your test files matches that of your tested files.\n\n#### options.severity\nType: `String`\nDefault value: `'fatal'`\n\nA string value that determines the severity of the failure.\nValid options are `'fatal'` (fails build) and `'warn'`\n\n#### options.convention\nType: `String`\nDefault value: `'Spec.js'`\n\nA string value that corresponds to the convention for naming your test files.\nThe default is the Jasmine convention where `'file.js`' is tested by `'fileSpec.js`'\n\nThe task works by replacing `'.js`' with the value provided here. So:\n- `'.spec.js'` : `file.js => file.spec.js`\n- `'Test.js'` : `file.js`' => `'fileTest.js`\n\n### Usage Examples\n\n#### Default Options\nIn this example, we check for corresponding test cases for all JavaScript files,\nand throw a fatal warning if any test cases are missing.\n\n```js\ngrunt.initConfig({\n  specCheck: {\n    files: {\n      src: [\"lib/**/*.js\"]\n    },\n  },\n});\n```\n\n#### Custom Options\nIn this example, we check for corresponding test cases for all JavaScript files,\nbut we exclude any debug files. Our test naming convention is to use the term Test\ninstead of Spec, and we only want to list untested files and not fail the build.\nWe are also using template properties to cut down on repeated file paths.\n\n\n```js\ngrunt.initConfig({\n  app: {\n    'tests': 'src/test/resources/scripts',\n    'scripts': 'src/main/resources/scripts'\n  },\n  specCheck: {\n    options: {\n      convention: \"Test.js\"\n      severity: \"warn\",\n      testDir: \"<%= app.scripts %>\",\n      baseDir: \"<%= app.tests %>\"\n    }\n    files: {\n      src: [\n        \"<%= app.scripts %>/**/*.js\",\n        \"!<%= app.scripts %>/**/*debug.js\",\n      ]\n    },\n  },\n});\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\n## Release History\n_(Nothing yet)_\n",
  "readmeFilename": "README.md",
  "_id": "grunt-spec-check@0.1.0",
  "_from": "grunt-spec-check@"
}
